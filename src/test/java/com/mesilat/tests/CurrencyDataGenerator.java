package com.mesilat.tests;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.Properties;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import junit.framework.TestCase;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ObjectNode;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class CurrencyDataGenerator extends TestCase {

    private static final String ISO_4217 = "https://www.currency-iso.org/dam/downloads/lists/list_one.xml";
    private static final String CLDR_NUMBERS_MODERN = "/Users/slava/Projects/third-party/cldr-numbers-modern";
    private static final String TEMP = "/Users/slava/temp/currencies";
    private static final String COMMENT = "This file is autogenerated from CLDR: https://github.com/unicode-cldr/cldr-numbers-modern.git";

    public CurrencyDataGenerator(String testName) {
        super(testName);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public void testGenerate() throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document doc = db.parse(new URL(ISO_4217).openStream());

        XPath xPath = XPathFactory.newInstance().newXPath();
        String expression = "/ISO_4217/CcyTbl/CcyNtry/Ccy";
        NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);

        List<String> currencies = new ArrayList<>();
        for (int i = 0; i < nodeList.getLength(); i++) {
            Element e = (Element) nodeList.item(i);
            if (!currencies.contains(e.getTextContent())) {
                currencies.add(e.getTextContent());
            }
        }

        File main = new File(CLDR_NUMBERS_MODERN, "main");
        for (File dir : main.listFiles()) {
            File file = new File(dir, "currencies.json");
            if (file.exists()) {
                ObjectMapper mapper = new ObjectMapper();
                ObjectNode root = (ObjectNode) mapper.readTree(file);

                root.get("main").getFields().forEachRemaining((l) -> {
                    String locale = l.getKey();
                    JsonNode c = l.getValue().get("numbers").get("currencies");

                    Properties props = new SortedProperties();
                    currencies.stream().forEach((a) -> {
                        if (c.has(a)) {
                            props.put(a, c.get(a).get("displayName").asText());
                        }
                    });

                    try (FileOutputStream o = new FileOutputStream(String.format("%s/%s.properties", TEMP, locale.replace('-', '_')))) {
                        props.store(o, COMMENT);
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                });

            }
        }

    }

    private static class SortedProperties extends Properties {
        @Override
        public Enumeration keys() {
            ArrayList<Object> result = Collections.list(super.keys());
            Collections.sort(result, (a, b) -> a.toString().compareTo(b.toString()));
            return Collections.enumeration(result);
        }
    }
}
